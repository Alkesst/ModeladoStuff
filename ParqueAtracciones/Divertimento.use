model Divertimento

class Parque
end

class CRA
operations
    averiaDetectada(trans: Transporte, atr: Atraccion)
    begin
    end
    pre transportePerteneceAtraccion: atr.transportes->includes(trans)
    pre mismoParque: atr.parque = self.parque
    post nuevaAveria: Averia.allInstances->size()-Averia.allInstances@pre->size()    = 1
end

abstract class Transporte
attributes
    numeroCalle: Integer
operations
    -- Notification operations
    brokenTransport()
    begin
    end
    fixedTransport()
    begin
    end


statemachines
    psm Estado
        states
            s: initial
            Averiado
            Funcionando
        transitions
            s -> Funcionando
            Funcionando -> Averiado { brokenTransport() }
            Averiado -> Funcionando { fixedTransport() }
    end
end

class Vagon < Transporte
end

class Vehiculo < Transporte
end

abstract class Atraccion
attributes
    numeroCalle: Integer
operations
    fixedComponent() -- When a component is fixed and notifies this class
    begin
    end
    brokenComponent() -- When a component is broken and notifies this class
    begin
    end
statemachines
    psm Estado
        states
            s: initial
            Funcionando
            Averiado
        transitions
            s -> Funcionando
            Funcionando -> Averiado { brokenComponent() }
            Averiado -> Funcionando { fixedComponent() }
    end
end

class Noria < Atraccion
end

class MRusa < Atraccion
end

class Operario
operations
    workerBusy()
    begin
    end
    workerReleased()
    begin
    end
statemachines
    psm Estado
        states
            s: initial
            Libre
            Ocupado
        transitions
            s -> Libre
            Libre -> Ocupado { workerBusy() }
            Ocupado -> Libre { workerReleased() }
    end
end

class Dispositivo
attributes
    averiasAtendidas: Integer init: 0
    opDisponible : Boolean derive = operario.averiaAtendida->isEmpty()
end

associationclass Averia between
Transporte [*] role transporte
CRA [0..1] role cra
attributes
    atendida : Boolean derive = operario->notEmpty()
operations
    beginIssue()
    begin
    end
    finishedIssue()
    begin
    end
statemachines
    psm Gestion
        states
            s: initial
            Pendiente
            Procesando
            Finalizado
        transitions
            s -> Pendiente
            Pendiente -> Procesando { beginIssue() }
            Procesando -> Finalizado { finishedIssue() }
    end
end

class Detector
end

association Posee between
    Parque [1] role parque
    CRA [1] role cra
end

association Trabajan between
    CRA [1] role cra
    Operario [1..*] role operarios
end

association Atiende between
    Operario [0..1] role operario
    Averia [0..1] role averiaAtendida
end

composition Existen between
    Parque [1] role parque
    Atraccion [1..*] role atracciones
end

aggregation Compuesta between
    Atraccion [1] role atraccion
    Transporte [1..*] role transportes
end

association Poseedor between
    Operario [1] role operario
    Dispositivo [1] role dispositivo
end

association Contiene between
    Detector [1] role detector
    Transporte [1] role transporte
end

association Anclado between
    Vagon [0..1] role anterior
    Vagon [0..1] role posterior
end

constraints
context Averia
inv MismaCRAOperarios:
    self.operario.cra = self.cra
inv MismaCRATransporte:
    self.transporte.atraccion.parque.cra = self.cra

context Atraccion
inv mismoTipoTransporte: OclIsType(Noria) implies transportes.forAll(t | t.OclIsType(Vehiculo)) and
                OclIsType(MRusa) implies transportes.forAll(t | t.OclIsType(Vagon))

context Vagon inv noAncladoASiMismo: posterior <> anterior
