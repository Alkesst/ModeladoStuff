model Divertimento

class Parque
end

class CRA
operations
    averiaDetectada(trans: Transporte, atr: Atraccion)
    begin
        declare a: Averia, op: Operario;
        if trans.averia->isEmpty() then
            a := new Averia between (trans, self);
            if self.operarios->select(op | op.dispositivo.opDisponible)->notEmpty() then
                op := self.operarios->any(op | op.dispositivo.opDisponible);
                insert(op, a) into Atiende;
                op.dispositivo.enviarIncidencia(atr.numeroCalle, trans.numero);
            else
                trans.averiaNoAtendida(a);
            end
        else
            a := trans.averia;
            if self.operarios->select(op | op.dispositivo.opDisponible)->notEmpty() then
                op := self.operarios->any(op | op.dispositivo.opDisponible);
                insert(op, a) into Atiende;
                op.dispositivo.enviarIncidencia(atr.numeroCalle, trans.numero);
            else
                trans.averiaNoAtendida(a);
            end
        end
    end
    pre transportePerteneceAtraccion: atr.transportes->includes(trans)
    pre mismoParque: atr.parque = self.parque
    post nuevaAveria: Averia.allInstances->size() = Averia.allInstances->size@pre() + 1

    averiaArreglada(av: Averia)
    begin
        declare transporte: Transporte;
        transporte := av.transporte;
        transporte.arreglarTransporte(av);
    end
    pre averiaPerteneceACRA: self.averia->includes(av)
    pre averiaAsignadaAOperario: av.operario->notEmpty() and self.operarios->includes(av.operario)
    post averiaEliminada: self.averia@pre->size() = self.averia->size() + 1
end

abstract class Transporte
attributes
    numero: Integer 
operations
    -- Notification operations
    -- Si en un momento determinado se detectara pérdida de anclaje,
    -- el correspondiente vehículo se lo comunicaría a la Central Receptora de Averías
    -- (CRA) y también a la atracción de la que forma parte dicho vehículo
    romperTransporte()
    begin
        self.atraccion.componenteAveriado();
        self.atraccion.parque.cra.averiaDetectada(self, self.atraccion)
    end
    pre noUltimoVagon: self.oclIsTypeOf(Vagon) implies self.oclAsType(Vagon).posterior -> notEmpty()
    averiaNoAtendida(averia: Averia)
    begin
    end
    pre existeAveria: self.averia->notEmpty()
    pre mismaAveria: self.averia = averia
    arreglarTransporte(av: Averia)
    begin
        destroy(av);
        self.atraccion.arreglarComponente(); -- Esta así porque quiero probar estados
    end
    pre existeAveria: self.averia->notEmpty
    pre averiaAtendida: self.averia.atendida
    pre mismaAveria: self.averia = av
    post AveriaEliminada: self.averia->isEmpty and Averia.allInstances->excludes(av)


statemachines
    psm Estado
        states
            s: initial
            Averiado
            Funcionando
        transitions
            s -> Funcionando
            Funcionando -> Averiado { romperTransporte() }
            Averiado -> Funcionando { arreglarTransporte() }
    end
end

class Vagon < Transporte
end

class Vehiculo < Transporte
end

abstract class Atraccion
attributes
    numeroCalle: Integer 
operations
    arreglarComponente() -- When a component is fixed and notifies this class
    begin
    end
    post unaAveriaMenos: self.transportes.cra->size() = self.transportes.cra@pre->size() - 1
    componenteAveriado() -- When a component is broken and notifies this class
    begin
    end
    post unaAveriaMas: self.transportes.cra->size() = self.transportes.cra@pre->size() + 1
statemachines
    psm Estado
        states
            s: initial
            Funcionando
            Esperando
        transitions
            s -> Funcionando
            Funcionando -> Esperando { componenteAveriado() }
            Esperando -> Funcionando { [self.transportes->collect(averia)->size()=1] arreglarComponente() }
            Esperando -> Esperando { componenteAveriado() }
            Esperando -> Esperando { [self.transportes->collect(averia)->size()>1] arreglarComponente() }
    end
end

class Noria < Atraccion
end

class MRusa < Atraccion
end

class Operario
operations
    trabajadorOcupado()
    begin
        self.averiaAtendida.empezarReparacion();
        -- Operario realiza reparación
        self.trabajadorLibre();
    end
    pre existeAveriaAReparar: self.averiaAtendida->notEmpty()
    trabajadorLibre()
    begin
        self.dispositivo.incidenciaResuelta(self.averiaAtendida);
    end
    pre ocupado: not self.dispositivo.opDisponible
    post operarioLibre: self.dispositivo.opDisponible

statemachines
    psm Estado
        states
            s: initial
            Libre
            Ocupado
        transitions
            s -> Libre
            Libre -> Ocupado { trabajadorOcupado() }
            Ocupado -> Libre { trabajadorLibre() }
    end
end

class Dispositivo
attributes
    averiasAtendidas: Integer init: 0 
    opDisponible : Boolean derive = operario.averiaAtendida->isEmpty()
operations
    enviarIncidencia(calle: Integer, transNumero: Integer)
    begin
        self.operario.trabajadorOcupado();
    end
    pre averiaEnCalleYTransporte: Averia.allInstances->collect(transporte)->asSet()
                        ->exists(t | t.numero = transNumero and t.atraccion.numeroCalle = calle)
    post trabajadorOcupado: let av: Averia = Averia.allInstances->
                        select(av | av.transporte.numero = transNumero
                        and av.transporte.atraccion.numeroCalle = calle)
                        ->asSequence()->first() in
                        not self.opDisponible and self.operario.averiaAtendida = av


    incidenciaResuelta(av: Averia)
    begin
        declare cra: CRA;
        cra := self.operario.cra;
        cra.averiaArreglada(av);
        self.averiasAtendidas := self.averiasAtendidas + 1;
    end
    pre trabajadorOcupado: not self.opDisponible
    pre trabajadorAtiendeAveria: self.operario.averiaAtendida = av
    post averiasResueltasIncrementada: self.averiasAtendidas = self.averiasAtendidas@pre + 1
    post trabajadorLibre: self.opDisponible
end

associationclass Averia between
Transporte [*] role transporte
CRA [0..1] role cra
attributes
    atendida : Boolean derive = operario->notEmpty()
operations
    empezarReparacion()
    begin
    end
    pre existeOperarioAtendiendo: self.atendida

statemachines
    psm Gestion
        states
            s: initial
            Pendiente
            Procesando
        transitions
            s -> Pendiente
            Pendiente -> Procesando { empezarReparacion() }
    end
end

class Detector
end

association Posee between
    Parque [1] role parque
    CRA [1] role cra
end

association Trabajan between
    CRA [1] role cra
    Operario [1..*] role operarios
end

association Atiende between
    Operario [0..1] role operario
    Averia [0..1] role averiaAtendida
end

composition Existen between
    Parque [1] role parque
    Atraccion [1..*] role atracciones
end

aggregation Compuesta between
    Atraccion [1] role atraccion
    Transporte [1..*] role transportes
end

association Poseedor between
    Operario [1] role operario
    Dispositivo [1] role dispositivo
end

association Contiene between
    Detector [1] role detector
    Transporte [1] role transporte
end

association Anclado between
    Vagon [0..1] role anterior
    Vagon [0..1] role posterior
end

constraints
context Averia
inv MismaCRAOperarios:
    self.operario.cra = self.cra

inv MismaCRATransporte:
    self.transporte.atraccion.parque.cra = self.cra

context Atraccion
-- por algun motivo estas dos restricciones al estar juntas dan true
-- casi siempre (a pesar de tener un and entre ellas)
-- separadas en 2 funcionan
inv numeroCalleDefinido:
	not self.numeroCalle.oclIsUndefined()

inv siNoriaEntoncesVehiculos:
    self.oclIsTypeOf(Noria) implies transportes.forAll(t | t.oclIsTypeOf(Vehiculo))
inv siMRusaEntoncesVagones:
    self.oclIsTypeOf(MRusa) implies transportes.forAll(t | t.oclIsTypeOf(Vagon))

context Vagon inv noAncladoASiMismo:
    posterior <> anterior or
    (self.anterior->size() = 0 and self.posterior->size() = 0)
    -- Si no se añade el size de anterior y posterior, al ser Undefined
    -- anterior y posterior, peta porque son "iguales"

context Transporte
inv  numeroProyecto:
	not self.numero.oclIsUndefined()
