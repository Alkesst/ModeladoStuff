model Marriage

class Clock
attributes
now:Integer init: 2018
operations
  tick() -- 1 year
    begin
      self.now:=self.now+1;
      for p in self.system.people do
        if not p.isDead then p.birthday();
        end
      end
    end
    post oneYearHasPassed: self.now = self.now@pre+1
end

class System
attributes
    youngAge : Integer
    adultAge : Integer
    elderAge : Integer
    marryAge : Integer
operations
    divorce(p1: Person, p2: Person)
    begin
        declare currentMarriage:Marriage;
        currentMarriage := p1.husband->union(p1.wife)->select(m | m.finishDate = -1)
                      ->asSequence()->first();
        currentMarriage.finishDate := self.clock.now;
        p1.divorce(currentMarriage);
        p2.divorce(currentMarriage);
    end
    pre activeMarriageAndSamePersons:
            p1.husband->union(p1.wife)->select(m | m.finishDate = -1)
            ->asSet()->intersection(p2.husband->union(p2.wife)->select(m | m.finishDate = -1)
            ->asSet())->notEmpty()
    post currentMarriagesFinished:
        p1.husband->union(p1.wife)
            ->forAll(m | m.finishDate<=p1.system.clock.now@pre)
            and
        p2.husband->union(p2.wife)
        ->forAll(m | m.finishDate<=p2.system.clock.now@pre)
  marry(p1:Person, p2:Person)
    begin
      declare m:Marriage;
      m := new Marriage;
      m.weddingDate:=self.clock.now;
      m.finishDate:=-1;
      insert(p1, m) into MarriageHusband;
      insert(p2, m) into MarriageWife;
      p1.marry(m, p2);
      p2.marry(m, p1);
    end
    pre noKiddosAllowed: p1.age > marryAge and p2.age > marryAge
    pre notMyself: p1<>p2
    pre bothAlive: not(p1.isDead or p2.isDead)
    pre noOneCurrentlyMarried:
      not (p2.isMarried() or p1.isMarried())
    post onlyOneNewMarriage: p1.marriages() = p1.husband@pre->union(p1.wife@pre)->size() + 1 and
                             p2.marriages() = p2.husband@pre->union(p2.wife@pre)->size() + 1
    post newMarriage: let m:Marriage = p2.husband->select(m | m.oclIsNew())->asSequence()->first()
                      in m.weddingDate = p2.system.clock.now
                      and p2.husband->includes(m) and p1.wife->includes(m)
                      and m.husband = p1 and m.wife = p2
end

class Person
attributes
  age:Integer init: 0
  birthdate:Integer init: Clock.allInstances->collect(now)->asSequence()->first()
  deathDate:Integer init: -1
  isDead:Boolean derive = deathDate<>-1
operations
  marriages(): Integer = self.wife->union(self.husband)->size()
  isMarried(): Boolean= self.wife->union(self.husband)->exists(m | m.finishDate=-1)
  marry(m: Marriage, p: Person)
    begin
    end
    pre marriageActive: m.weddingDate = system.clock.now and m.finishDate = -1
    pre marriedWithTheOther: m.husband = self and m.wife = p or
                             m.husband = p and m.wife = self
  birthday()
    begin
      self.age:=self.age+1
    end
    pre: system.clock.now > birthdate + age
    post: self.age = self.age@pre + 1
  notifySpouseDead(p:Person)
    begin
    end
    pre bothMarriedWithTheOther:
      let activeMarriage:Marriage = self.husband->union(self.wife)
      ->select(m | m.finishDate = -1)->asSequence()->first() in
      self.isMarried() and
      (activeMarriage.husband = p or activeMarriage.wife = p)
    pre spouseIsDead: p.isDead

  kill()
    begin
      self.deathDate := self.system.clock.now;
      if self.isMarried() then
        declare currentMarriage:Marriage;
        currentMarriage := self.husband->union(self.wife)->select(m | m.finishDate = -1)
                          ->asSequence()->first();
        if currentMarriage.husband = self then
          currentMarriage.wife.notifySpouseDead(self);
          currentMarriage.finishDate := self.system.clock.now;
        else
          currentMarriage.husband.notifySpouseDead(self);
          currentMarriage.finishDate := self.system.clock.now;
        end
      end
    end
    pre isAlive: not self.isDead
    post deathNoted: self.deathDate=self.system.clock.now@pre
    post everyMarriageEnd:
      self.husband->union(self.wife)
      ->forAll(m | m.finishDate<=self.system.clock.now@pre)
  divorce(m: Marriage)
    begin
    end
    pre divorcedNow: m.finishDate = system.clock.now
    post everyMarriageEnd:
      self.husband->union(self.wife)
      ->forAll(m | m.finishDate <= self.system.clock.now@pre)
 statemachines
    psm LifeCycle
        states
            s: initial
            Kid
            Young
            Adult
            Elder
            Dead
        transitions
            s -> Kid
            Kid -> Dead { kill() }
            Young -> Dead { kill() }
            Adult -> Dead { kill() }
            Elder -> Dead { kill() }
            Kid -> Kid { [self.age < self.system.youngAge - 1] birthday ()}
            Kid -> Young { [self.age = self.system.youngAge - 1] birthday() }
            Young -> Young { [self.age < self.system.adultAge - 1] birthday() }
            Young -> Adult { [self.age = self.system.adultAge - 1] birthday() }
            Adult -> Adult { [self.age < self.system.elderAge - 1] birthday() }
            Adult -> Elder { [self.age = self.system.elderAge - 1] birthday() }
            Elder -> Elder { birthday() }
    end
    psm CivilStatus
      states
          s: initial
          Single
          Divorced
          Widowed
          Married
      transitions
          s -> Single
          Single -> Married { marry() }
          Married -> Widowed { [self.isMarried()] notifySpouseDead() }
          Married -> Divorced { divorce() }
          Divorced -> Married { marry() }
          Divorced -> Divorced { kill() }
          Married -> Married { kill() }
          Single -> Single { kill() }
          Widowed -> Widowed { kill() }
          Widowed -> Married { marry() }
      end
end

class Marriage
attributes
  weddingDate:Integer
  finishDate:Integer
end

association MarriageWife between
Person[1]
role wife
Marriage[*]
role husband
end

association MarriageHusband between
Person[1]
role husband
Marriage[*]
role wife
end

composition Community between
System[1]
role system
Person[*]
role people
end

aggregation ClockSystem between
System[*] role system
Clock[1] role clock
end

constraints

context Person
inv dontDieBeforeBeingBorn:
  deathDate <> -1 implies deathDate>=self.birthdate
inv noFutureBorn:
  self.birthdate<=self.system.clock.now
inv noDeadMarriage:
  self.isDead implies (self.husband->union(self.wife))->forAll(m| self.deathDate >= m.finishDate)
inv Monogamy:
  self.husband->union(self.wife)->select(m | m.finishDate = -1)->size <= 1
inv noChildMarried:
  self.age < 12 implies not self.isMarried()

context Marriage
inv dontMarryYourself:
  husband <> wife
inv dontEndMarriageBeforeWedding:
  finishDate <> -1 implies finishDate>=self.weddingDate
inv noFutureMarriage:
  self.weddingDate<=Clock.allInstances->collect(now)->asSequence()->first()

context Clock
inv singleton:
  Clock.allInstances->size()=1
